# -*- coding: utf-8 -*-
"""LVADSUSR154_HareeshKumaarGJ_Lab2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CpSC-2Tl_ZCECpa85KCu2gndACMIgckc
"""

#Logistic Regression
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import MinMaxScaler,StandardScaler,LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score,mean_squared_error

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, classification_report

df = pd.read_csv('/content/booking.csv')
df.head(10)

df.columns

df.rename(columns={'number of adults':'number_of_adults'}, inplace=True)
df.rename(columns={'number of children':'number_of_children'}, inplace=True)
df.rename(columns={'number of weekend nights':'number_of_weekend_nights'}, inplace=True)
df.rename(columns={'number of week nights':'number_of_week_nights'}, inplace=True)
df.rename(columns={'type of meal':'type_of_meal'}, inplace=True)
df.rename(columns={'car parking space':'car_parking_space'}, inplace=True)
df.rename(columns={'room type':'room_type'}, inplace=True)
df.rename(columns={'lead time':'lead_time'}, inplace=True)
df.rename(columns={'market segment type':'market_segment_type'}, inplace=True)
df.rename(columns={'average price':'average_price'}, inplace=True)
df.rename(columns={'special requests':'special_requests'}, inplace=True)
df.rename(columns={'date of reservation':'date_of_reservation'}, inplace=True)
df.rename(columns={'booking status':'booking_status'}, inplace=True)

df.describe(include='all')

df.shape

df.info()

df.isnull().sum()

df.duplicated().sum()

#Univariate Histogram
for column in df.select_dtypes(include=['float64','int64']).columns:
  plt.figure(figsize=(10,5))
  sns.histplot(df[column])
  plt.title(f'Histogram of {column}')
  plt.xlabel(column)
  plt.ylabel('Frequency')
  plt.show()

#Univariate Categorical Bar graph
for column in df.select_dtypes(include=['object']).columns:
  plt.figure(figsize=(10,5))
  df[column].value_counts().plot(kind='bar')
  plt.title(f'Bar graph of {column}')
  plt.xlabel(column)
  plt.ylabel('Count')
  plt.show()

#Null values
df.average_price = df['average_price'].fillna(df['average_price'].median())
#for category
mode = df['room_type'].mode()
df.room_type = df.room_type.fillna(mode)

df.isnull().sum()

#Boxplot to treat outliers
for column in df.select_dtypes(include=['float64','int64']).columns:
  plt.figure(figsize=(10,5))
  sns.boxplot(x=df[column])
  plt.title(f'Boxplot of {column}')
  plt.xlabel(column)
  plt.show()

#Outlier Identification
q1 = np.percentile(df['average_price'],25)
q3 = np.percentile(df['average_price'],75)
iqr = q3-q1

lower_bound = q1 - (1.5*iqr)
upper_bound = q3 + (1.5*iqr)
print(lower_bound)
print(upper_bound)

outliers_price = [i for i in df['average_price'] if i<lower_bound or i>upper_bound]
print("Outliers in average_price :",outliers_bmi)

#Bivariate Analysis
#Correlation Matrix and HeatMap
num = df.select_dtypes(include=['float64','int64']).columns
correlation_matrix = df[num].corr()
print(correlation_matrix)

#Heatmap
plt.figure(figsize=(10,7))
sns.heatmap(correlation_matrix,annot=True)

for i in range(len(num)):
  for j in range(i+1,len(num)):
    sns.scatterplot(data=df,x=num[i],y=num[j])
    plt.title(f"Scatter plot between {num[i]} and {num[j]}")
    plt.xlabel(f"{num[i]}")
    plt.ylabel(f"{num[j]}")
    plt.show()

df.dtypes

#Encoding
encode = ['type_of_meal','booking_status','market_segment_type','room_type']
le = LabelEncoder()
for column in encode:
  df[column]=le.fit_transform(df[column])

df.dtypes

#Duplicate treatment
df.duplicated().sum()

d = df

d.drop(columns=['date_of_reservation','Booking_ID'],inplace=True)

X = d.drop(columns=['booking_status'])
y = d['booking_status']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

d.dtypes

scaler = MinMaxScaler()
#min max scaler linear
X_train=scaler.fit_transform(X_train)
X_test=scaler.transform(X_test)

model = LogisticRegression()
model.fit(X_train,y_train)

y_pred = model.predict(X_test)

print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))
print("\nClassification Report:")
print(classification_report(y_test, y_pred))
# Accuracy
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

# Precision
precision = precision_score(y_test, y_pred)
print("Precision:", precision)

# Recall
recall = recall_score(y_test, y_pred)
print("Recall:", recall)

# F1-score
f1_score = f1_score(y_test, y_pred)
print("F1-score:", f1_score)