# -*- coding: utf-8 -*-
"""LVADSUSR154_HareeshKumaarGJ_Lab1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QvdBxv3q_4hxGgwhWykcHgwjGBMunMQ-
"""

#Linear Regression
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import MinMaxScaler,StandardScaler,LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score,mean_squared_error

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, classification_report

df = pd.read_csv("/content/expenses.csv")
df.head(10)

df.shape

df.info()

df.describe(include='all')

df.dtypes

df.isnull().sum()

df.duplicated().sum()

#Univariate Histogram
for column in df.select_dtypes(include=['float64','int64']).columns:
  plt.figure(figsize=(10,5))
  sns.histplot(df[column])
  plt.title(f'Histogram of {column}')
  plt.xlabel(column)
  plt.ylabel('Frequency')
  plt.show()

#Univariate Categorical Bar graph
for column in df.select_dtypes(include=['object']).columns:
  plt.figure(figsize=(10,5))
  df[column].value_counts().plot(kind='bar')
  plt.title(f'Bar graph of {column}')
  plt.xlabel(column)
  plt.ylabel('Count')
  plt.show()

#Null values
df.bmi = df['bmi'].fillna(df['bmi'].median())

df.isnull().sum()

#Boxplot to treat outliers
for column in df.select_dtypes(include=['float64','int64']).columns:
  plt.figure(figsize=(10,5))
  sns.boxplot(x=df[column])
  plt.title(f'Boxplot of {column}')
  plt.xlabel(column)
  plt.show()

#Outlier Identification
q1 = np.percentile(df['bmi'],25)
q3 = np.percentile(df['bmi'],75)
iqr = q3-q1

lower_bound = q1 - (1.5*iqr)
upper_bound = q3 + (1.5*iqr)
print(lower_bound)
print(upper_bound)

outliers_bmi = [i for i in df['bmi'] if i<lower_bound or i>upper_bound]
print("Outliers in bmi :",outliers_bmi)

df.loc[df['bmi']>46.6025,'bmi']=46.6025
df.loc[df['bmi']<14.142,'bmi']=14.142

#Bivariate Analysis
#Correlation Matrix and HeatMap
num = df.select_dtypes(include=['float64','int64']).columns
correlation_matrix = df[num].corr()
print(correlation_matrix)

#Heatmap
sns.heatmap(correlation_matrix,annot=True)

for i in range(len(num)):
  for j in range(i+1,len(num)):
    sns.scatterplot(data=df,x=num[i],y=num[j])
    plt.title(f"Scatter plot between {num[i]} and {num[j]}")
    plt.xlabel(f"{num[i]}")
    plt.ylabel(f"{num[j]}")
    plt.show()

df.dtypes

#Encoding
encode = ['sex','smoker','region']
le = LabelEncoder()
for column in encode:
  df[column]=le.fit_transform(df[column])

df.dtypes

#Duplicate treatment
df.duplicated().sum()

df.drop_duplicates(inplace=True)

df.duplicated().sum()

d = df
X = d.drop(columns=['charges','region','sex'])
y = d['charges']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

scaler = MinMaxScaler()
#min max scaler linear
X_train=pd.DataFrame(scaler.fit_transform(X_train[list(X.columns)]),
                                    columns=X.columns)
X_test=pd.DataFrame(scaler.transform(X_test[list(X.columns)]),
                                    columns=X.columns)

model = LinearRegression()
model.fit(X_train,y_train)

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test,y_pred)
print("Mean Squared Error: ",mse)
rmse = mean_squared_error(y_test,y_pred,squared=False)
print("Root Mean Squared Error: ",rmse)
r2_s = r2_score(y_test,y_pred)
print("R2 Score",r2_s)

